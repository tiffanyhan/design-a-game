 what additional properties did you add to your models and why?

 For the Game model, I added one additional property named
 'all_results'.  I added this property in order to store
 the game history.  This is the information returned by
 the api endpoint 'get_game_history'.  This endpoint shows the
 history of all guesses made and the results of those guesses for
 each game.  I made the 'all_results' property a StringProperty
 instead of a JsonProperty, since it doesn't make sense to
 query the information within the property.  Using StringProperty
 is adequate for the purposes of storing and retrieving the
 information.

 For the Score model, I removed the original guesses property and
 replaced it with an 'attempts_remaining' property.  The original
 guesses property didn't make sense for the Hangman game, since
 players of the Hangman game can make as many guesses as they want
 without having their allowed number of guesses decremented, as
 long as these guesses are correct.  Therefore, the 'attempts_remaining'
 property refers to the number of remaining guesses the user still has
 when the game is over.  This is a more accurate signifier of a
 high score for this game.  Furthermore, the 'attempts_remaining'
 property is presented in decimal form rather than whole number
 form.  This provides some accountability for the fact that users
 can specify the allowed number of attempts when creating a new game.

 I also added a 'number_of_letters' property to the Score model.
 This property is a good way to break ties after scores are first
 ordered using the 'attempts_remaining' property.  This is because
 the game becomes more challenging when there is a greater number
 of letters in the target word, and vice versa.

 For the User model, I added two properties.  First, I added a
 'wins' property.  This property represents the number of wins
 a user has in decimal form.  This property was added to
 enable ranking of users by performance.  The api endpoint
 'get_user_rankings' returns all users ranked by performance.
 In this case, users are first ranked using the 'wins' property.

 To break any potential ties, users are then ranked according
 to the 'avg_attempts_remaining' property.  This is the second
 property I added to the User model.  This property represents
 in decimal value the average over all games of the number of
 attempts remaining when the game is finished.

 - what were some trade-offs or struggles you faced when implementing
 the new game logic?

 One struggle I faced was how to format my endpoint responses.
 Since the api is designed to be used with any front-end client,
 I wanted my responses to be scalable and sustainable over time.
 Therefore, I opted not to include a 'message' property within
 GameForm, since string messages are more susceptible to small changes
 which can introduce bugs.  For instance, a small change in punctuation
 can force the front-end client to break if it is only relying on a
 message property for game state information.  Therefore, I used
 a simple 'hit' BooleanProperty, which tells the user whether
 their guess was a hit or miss.  Using this information, the front-end
 client can then design their own messages to send to the end user.